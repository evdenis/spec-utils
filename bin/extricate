#!/usr/bin/env perl

# Program for extracting kernel module functions with all dependants.
# Copyright (C) <2018> Denis Efremov <efremov@ispras.ru>, ISP RAS
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License along
# with this program; if not, write to the Free Software Foundation, Inc.,
# 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.

use warnings;
use strict;

use feature qw(switch say);
no if $] >= 5.018, warnings => "experimental::smartmatch";
use re '/aa';

use Pod::Usage;
use List::Util qw(any);
use Getopt::Long qw(:config gnu_compat no_getopt_compat pass_through);
use File::Spec::Functions qw(catfile catdir splitpath);
use File::Which;
use Storable;
use POSIX qw(setsid);
use Module::Loader;
use Try::Tiny;
use YAML qw(LoadFile);
use Cwd qw(realpath);
use Scalar::Util qw(blessed);
use File::Path qw(make_path);

use FindBin;
use lib::abs '../lib';

use Local::Config qw(load_config);
use Local::Config::Format qw(check_status_format);
use Local::List::Util qw(uniq difference);
use Local::Config qw(find_config);
use Local::Terminal qw(window_size);
use Kernel::Common qw(check_kernel_dir autodetect_kernel_directory);
use Kernel::Module qw(parse_sources);
use Kernel::Module::Graph qw(
  build_sources_graph
  get_predecessors_subgraph
  output_sources_graph
);
use Configuration qw(switch_system);

BEGIN {
   eval {
      require Smart::Comments;
      Smart::Comments->import();
   }
}

=encoding utf8

=pod

=head1 extricate

extricate - single out a function with its dependencies to a separate compilation unit from a set of sources. Can handle ACSL specifications and respects logic dependencies.

=head1 SYNOPSIS

 extricate [options]

 Options:
  -k|--kernel dir         - path to the directory with kernel sources
  -m|--module dir         - path to the directory with module sources
  --mname <name>          - module name (e.g., fat, vfat, msdos)
  -t|--type linux|contiki - type of the project
  --config <file>         - use the configuration file "file"
  --plugin <name>         - use the plugin "name"

  -f|--functions f1 -f f2 ...
  -f|--functions f1,f2,...
  -f|--functions f1 f2 ...    - extricate the functions f1,f2,...
  -a|--all                    - extricate all functions
  -d|--done <conf>            - extricate functions from the configuration file
  -s|--single                 - extricate code to a single file
  --double                    - extricate code to a .c and .h files
  --merge                     - process all functions simultaniously (merge code)
  --full                      - output definitions (not declarations) for module functions
  --fullkernel                - output definitions (not declarations) for kernel functions
  --asmodule                  - recombine sources to a kernel module
  -r|--remove-fields          - remove unused constants from enum definitions

  -o|--output-file file       - use the file "file" for output
  --output-dir dir            - use the directory with name "dir" for output

  -c|--cache num - three levels of caching:
                      0 - don't use cache,
                      1 - use cache only for kernel part,
                      2 - use cache for the kernel and the module
  --renew-cache  - update the caches and exit
  -e|--editor    - run the the editor (ENV: EDITOR) at the final step

  -h|--help      - outputs this text
  --list-plugins - list available plugins

=head1 OPTIONS

=over 8

=item B<--config file>

Считать конфигурацию из файла file. В файле могут содержаться пустые строки, строки-комментарии(начинаются с #), и опции в том же формате, что и описаны в документации к программе без лидирующих -- и с обязательным = после опции и перед аргументом.

=item B<-m|--module dir>

Указание на директорию, где расположены исходные коды модуля ядра. По умолчанию директория берётся из переменной окружения I<CURRENT_PROJECT> если она задана, иначе используется текущая директория. Данные исходные коды в дальнейшем будут препроцессированы с директивой C<#define SPECIFICATION>.

=item B<-k|--kernel dir>

Указание на директорию, где расположены исходные коды ядра Linux. По умолчанию директория берётся из переменной окружения I<CURRENT_KERNEL> если она задана.

=item B<--mname name>

Иногда в директории --module находится несколько модулей. Это можно установить по Makefile. Например, в директории fs/fat/ находятся модули fat vfat msdos. Для того, чтобы указать какой конкретно использовать необходима эта опция. По умолчанию будет использоваться тот модуль, который состоит из большего количества *.c файлов.

=item B<-t|--type linux|contiki>

Тип проекта, с которым ведется работа. Задает некоторые стандартные настройки, характерные для проекта, такие как пути подключения заголовочных файлов, использование стандартной библиотеки и т. д. По умолчанию используется linux.

=item B<-f|--functions f1,f2 ...>

=item B<-f|--functions f1 f2 ...>

=item B<-f|--functions f1 -f f2 ...>

Строить выборку для функций модуля ядра f1,f2,... Обязательная опция. Допускает несколько функций в качестве аргумента. Программа обрабатывает каждую функцию из списка аргументов так, как если бы она последовательно запускалась на каждой функции отдельно.

=item B<-a|--[no-]all>

Если флаг all включён, программа строит выборку для всех функций из модуля ядра. В таком случае опция --functions не обязательна. Флаг all необходим, главным образом, для целей тестирования.

=item B<-d|--done conf>

Если опция указана, то из файла conf формата YAML (например, .graph.conf) считается список функций, помеченных как done. Эти функции будут рассматриваться таким образом, будто указаны в аргументе --functions. Аргументы --functions, --done, --all, не сочетаются друг с другом.

=item B<-s|--[no-]single>

Результирующий редуцированный набор исходных кодов размещается в нескольких файлах. Флаг --single убирает это разделение по файлам и выводит всё в один файл module.c (или если задана только одна функция, то в файл <fname>.c)

=item B<--double>

Результирующий редуцированный набор исходных кодов размещается в нескольких файлах. Флаг --double убирает это разделение по файлам и выводит всё в один файл заголовочный файл module.h и один файл module.c (или если задана только одна функция, то в файл <fname>.c и <fname.h>). Опция не совместима с опцией --single.

=item B<--[no-]merge>

По умолчанию для каждой функции создаётся отдельный файл с её зависимостями. Эта опция переключает подобное поведение, и теперь для всех функций, указанных в аргументе --functions, создаётся единый файл.

=item B<--full>

По умолчанию программа выводит только декларации для нецелевых функций(те, которые напрямую не указаны в опции --functions) модуля. Флаг --full отменяет это поведение, если он включён, выводятся определения функций вместо деклараций.

=item B<--asmodule>

Перекомбинировать исходные коды в собираемый модуль ядра. Автоматом включает опции --full,--merge,--all. Из ядерного кода выводятся не только декларации, но и функции, если они определены в заголовочных файлах. В вывод добавляются директивы module_init, module_exit, MODULE_LICENSE, EXPORT_SYMBOL... Не поддерживаются модули, содержащие в разных файлах static функции и глобальные переменные с совпадающими именами.

=item B<-r|--[no-]remove-fields>

Убрать неиспользуемые константы из определений enum. Значения остальных изменяются так, чтобы соответствовать оригинальному определению.

=item B<-o|--output-file file>

Задаёт путь для вывода результатов. Директория определяется автоматически из пути и создаётся при необходимости. При использовании, опция включает флаги --single и --merge. --merge используется для того, чтобы объединить результаты вывода всех функций. --single для того, чтобы не разделять вывод на 4 стандартных файла. Если поведение этих опций не укладывается в желаемый результат, используйте --output-dir. Опция не совместима с --output-dir. --output-file всегда имеет приоритет.

=item B<--output-dir dir>

Задаёт директорию для вывода результатов. По умолчанию используется директория result в папке с программой. Опция не совместима с --output-file. --output-file всегда имеет приоритет.

=item B<-c|cache num>

Опция указывает кэш какого уровня использовать. По умолчанию кэширование отключено и исходные коды модуля и ядра каждый раз анализируются заново. Если выполняется разбор исходных кодов, кэшированная версия не используется, то результаты анализа сериализуются и сохраняются для возможного последующего использования в качестве кэша. Уровни num: 0 - кэш не используется; 1 - используется кэш, связанный с исходными кодами ядра (в исходных кодах модуля не должны меняться подключаемые заголовки, исходный код ядра не должен меняться, в обратном случае будет наблюдаться расхождение между результатом работы программы с кэшированием и без кэширования); 2 - используется результаты кэширования как разбора исходных кодов ядра, так и исходных кодов модуля ядра (код ядра, код модуля ядра должны оставаться неизменными с прошлого запуска программы)

=item B<--renew-cache>

Обновить кэш всех уровней. После обновления выйти. Если ипользуется этот аргумент, то указывать --functions не обязательно.

=item B<--plugin name>

Загрузить плагин name. Просмотреть опции плагина и его описание можно опцией --plugin-<name>-help

=item B<-e|--[no-]editor>

Запустить редактор по окончании работы программы. Открываются файлы module.c для всех функций опции --functions. Используется редактор из переменной окружения EDITOR.

=item B<--list-plugins>

Вывести доступные плагины и завершить программу.

=item B<-h|--help>

Выводит полное описание программы.

=back

=head1 DESCRIPTION

В качестве входных данных программа получает наборы исходных кодов ядра Linux и модуля ядра Linux (для корректной работы версии должны соответствовать друг другу, модуль должен собираться под данное ядро), через аргументы комадной строки указывается одна из функций модуля ядра. В процессе работы программа осуществляет препроцессинг и разбор исходных кодов. Строится ориентированный граф зависимостей функций, структур и т.д. После того как граф построен, он урезается до собственного подграфа, построенного от указанной функции. На следующей стадии осуществляется вывод вершин графа с определениями из исходных кодов структур, функций и т.д. в детерминированном порядке в четыре файла(один, если указана опция --single, два - если --double): extern.h(декларации функций ядра)  kernel.h(определения из ядра)  module.c(функции из модуля ядра)  module.h (определения структур, макросы и т.д. из модуля)

=cut

my @functions;

#cache options
my $cache                = 0;
my $renew_cache_and_exit = 0;
my @cache_dir            = (catdir($ENV{HOME}, '.cache', 'extricate'), catdir($FindBin::Bin, '.cache'));
my @cache_file           = (undef, 'kernel.cache', 'kernel_module.cache');

my %config;
my $config_file;
my $config_direct = 0;
GetOptions('config=s' => sub {$config_file = $_[1], $config_direct = 1},)
  or pod2usage(1);

$config{all}             = 0;
$config{single}          = 0;
$config{double}          = 0;
$config{merge}           = 0;
$config{'remove-fields'} = 0;
$config{module}          = [];
$config{kernel}          = undef;
$config{mname}           = undef;
$config{type}            = undef;
$config{'output-dir'}    = 'result';
$config{'output-file'}   = undef;
$config{editor}          = 0;
$config{plugin}          = [];
$config{full}            = 0;
$config{done}            = undef;
$config{asmodule}        = 0;
$config{fullkernel}      = 0;

my $config_exists = 0;
if (!$config_file || !-r $config_file) {
   if ($config_direct) {
      die "Can't open config file $config_file.\n";
   } elsif (defined($config_file = find_config())) {
      $config_exists = 1;
   }
} else {
   $config_exists = 1;
}

if ($config_exists) {
   ### CONFIG FILE: $config_file
   open(my $conf, '<', $config_file);
   while (<$conf>) {
      chomp;
      next if m/\A\h*+#/;
      next if m/\A\h*+\Z/;

      if (m/\A([\w-]++)\h*+=\h*+(.*?)\h*\Z/) {
         if (exists $config{$1}) {
            if (ref $config{$1} eq 'ARRAY') {
               push @{$config{$1}}, $2;
            } else {
               $config{$1} = $2;
            }
         } else {
            unshift @ARGV, "--$1=$2";
         }
      } elsif (m/\A([\w-]++)\h*+\Z/) {
         unshift @ARGV, "--$1";
      } else {
         warn "Wrong config format in line $.: '$_'\n";
      }
   }
   close($conf);
}

unless (@{$config{module}}) {
   $config{module} = [$ENV{CURRENT_PROJECT} // '.'];
}

my $help         = 0;
my $list_plugins = 0;
my $module_init  = 1;
my @args_plugins;
GetOptions(
   'all|a!'            => \$config{all},
   'done|d=s'          => \$config{done},
   'functions|f=s{1,}' => \@functions,
   'module|m=s{1,}'    => sub {
      if ($module_init) {
         $config{module} = [$_[1]];
      } else {
         push @{$config{module}}, $_[1];
      }
      $module_init = 0;
   },
   'kernel|k=s'       => \$config{kernel},
   'mname=s'          => \$config{mname},
   'type|t=s'         => \$config{type},
   'cache|c:2'        => \$cache,
   'renew-cache'      => \$renew_cache_and_exit,
   'single|s!'        => \$config{single},
   'double'           => sub {$config{double} = 1; $config{single} = 0;},
   'merge!'           => \$config{merge},
   'full'             => \$config{full},
   'fullkernel'       => \$config{fullkernel},
   'asmodule'         => \$config{asmodule},
   'remove-fields|r!' => \$config{'remove-fields'},
   'output-file|o=s'  => \$config{'output-file'},
   'output-dir=s'     => \$config{'output-dir'},
   'editor|e!'        => \$config{editor},
   'plugin=s@'        => \@args_plugins,
   'list-plugins'     => \$list_plugins,
   'help|h'           => \$help
) or pod2usage(1);

pod2usage({-verbose => 2, -exitval => 0})
  if $help;

if ($config{type}) {
   die "Unknown system type $config{type}\n"
     unless switch_system($config{type});
}

$cache = 0
  if $renew_cache_and_exit;
@functions         = split(/,/, join(',', @functions));
$config{functions} = \@functions;
$config{plugin}    = [split(/,/, join(',', @{$config{plugin}}))];
push @{$config{plugin}}, @args_plugins;

if ($config{'output-file'}) {
   print "--output-file (-o) option forces --single and --merge options.\n";
   $config{single} = 1;
   $config{merge}  = 1;
   (undef, $config{'output-dir'}, $config{'output-file'}) =
     splitpath($config{'output-file'});
   unless ($config{'output-dir'}) {
      $config{'output-dir'} = '.';
   }
}

if ($config{asmodule}) {
   $config{all}        = 1;
   $config{merge}      = 1;
   $config{full}       = 1;
   $config{fullkernel} = 1;
}

if ($list_plugins) {
   my @plugins =
     map {lc(substr($_, rindex($_, ':') + 1))} Module::Loader->new(max_depth => 1)->search('App::Extricate::Plugin');
   print join("\n", @plugins) . "\n";
   exit 0;
}

$config{kernel} //= autodetect_kernel_directory();

pod2usage({-msg => "You should provide proper kernel directory with --kernel option\n", -exitval => 2})
  unless check_kernel_dir($config{kernel});

$config{kernel} = realpath $config{kernel};
$config{module} = [map {realpath $_} @{$config{module}}];

### KERNEL DIRECTORY: $config{kernel}
### MODULE DIRECTORY: $config{module}

pod2usage({-msg => "File $config{done} is not readable.\n", -exitval => 2})
  if $config{done} && !-r $config{done};

pod2usage({-msg => "You should provide at least one function name.\n", -exitval => 2})
  unless @functions || $config{all} || $config{done} || $renew_cache_and_exit;
pod2usage({-msg => "Can't use --all flag with --functions simultaneously.\n", -exitval => 2})
  if @functions && $config{all};
pod2usage({-msg => "Can't use --done flag with --functions simultaneously.\n", -exitval => 2})
  if @functions && $config{done};
pod2usage({-msg => "Can't use --all flag with --done simultaneously.\n", -exitval => 2})
  if $config{done} && $config{all};
pod2usage({-msg => "Can't use --single flag with --double simultaneously.\n", -exitval => 2})
  if $config{single} && $config{double};

# after these check we can handle $config{done}
if ($config{done}) {
   ### CONFIG FILE: $config{done}
   my $conf = load_config $config{done};
   die "Can't read $config{done} file.\n"
     unless $conf;
   die "File $config{done} has improper format.\n"
     unless check_status_format($conf);
   push @functions, uniq @{$conf->{done}};
}

my @plugins;
my %level = (full_graph => 1, reduced_graph => 2, raw_data => 3, pre_output => 4, post_output => 5, before_exit => 6);
if (@{$config{plugin}}) {
   my $loader = Module::Loader->new(max_depth => 1);
   my %pmap   = map {lc(substr($_, rindex($_, ':') + 1)), $_} $loader->search('App::Extricate::Plugin');
   foreach my $p (@{$config{plugin}}) {
      if (any {$p eq $_} keys %pmap) {
         ### LOADING PLUGIN: $p
         my $plugin = $pmap{$p};
         $loader->load($plugin);

         foreach (qw/level action process_options/) {
            unless (eval {$plugin->can($_)}) {
               die "plugin $p $plugin: doesn't have method '$_'\n";
            }
         }

         # process_options should be called first
         my $obj = $pmap{$p}->process_options(\%config, \@plugins);

         my %lvl = $obj->level;
         foreach (keys %lvl) {
            unless (defined $lvl{$_}) {
               die "plugin $p: level priority is not specified\n";
            }
            unless (exists $level{$_}) {
               die "plugin $p: unknown level\n";
            }
            unless ($lvl{$_} >= 0 && $lvl{$_} < 100) {
               die "plugin $p: only priority levels 0..99 supported\n";
            }
         }

         push @plugins, $obj;
      } else {
         die "There is no plugin: $p\n";
      }
   }
}

my %schedule;
foreach my $p (@plugins) {
   my %l = $p->level;
   foreach (keys %l) {
      my $pr = $l{$_};
      if (exists $schedule{$_}{$pr}) {
         die "Can't use plugin " . (ref $p) . " and " . (ref $schedule{$_}{$pr}) . " combined.\n";
      }
      $schedule{$_}{$pr} = $p;
   }
}
foreach my $l (keys %schedule) {
   $schedule{$l} = [map {$schedule{$l}{$_}} sort keys %{$schedule{$l}}];
}

if (@ARGV) {
   pod2usage({-msg => "Unknown options: " . join("\n", @ARGV) . "\n", -exitval => 2});
}

if (  $#functions == 0
   && ($config{single} || $config{double})
   && !defined($config{'output-file'}))
{
   my $out = "$functions[0].c";
   print "Generated output file name: $out\n";
   $config{'output-file'} = $out;
}

sub create_directory
{
   unless (make_path($_[0])) {
      unless (-e $_[0]) {
         warn("Can't create directory $_[0]: $!\n");
         return 1;
      }
   }

   0;
}

create_directory $config{'output-dir'};

{
   my $c = 0;
   foreach my $dir (@cache_dir) {
      unless (create_directory($dir)) {
         @cache_file = map {defined $_ ? catfile($dir, $_) : $_} @cache_file;
         $c          = 1;
         last;
      }
   }
   die "Can't create directory for cache.\n"
     unless $c;
}

$cache = 2 if $cache > 2;
$cache = 0 if $cache && !-r $cache_file[$cache];

### CACHE OPTIONS:
###   use:   $cache
###   file:  @cache_file
goto CACHED_GRAPH
  if $cache == 2;

### PARSING SOURCES...
my %sources = parse_sources($config{kernel}, $config{module}, $config{mname}, ["#define SPECIFICATION 1\n"],
   !$cache, $config{fullkernel});
die "Can't find functions in module files\n"
  unless $sources{module}{function};

### BUILDING SOURCES GRAPH...
my $g = build_sources_graph(\%sources, {cache => {use => $cache, file => $cache_file[1]}});
$g->set_graph_attribute('comments',       $sources{comments});
$g->set_graph_attribute('module_strings', $sources{module_strings});
$g->set_graph_attribute('kernel_strings', $sources{kernel_strings});
$g->set_graph_attribute('index',          $sources{module}{function}->index);

CACHED_GRAPH:
if ($cache == 2) {
   $g = retrieve($cache_file[2]);
} else {
   # Disable recursion check for Storable
   {
      no warnings 'once';
      $Storable::recursion_limit      = -1;
      $Storable::recursion_limit_hash = -1;
      store($g, $cache_file[2]);
   }

   exit 0
     if $renew_cache_and_exit;
}

print "\n";

my $exit_code = 0;

sub call_plugins
{
   my %opts = (@_, config => \%config);
   my $res  = 0;

   if (exists $schedule{$opts{level}}) {
      foreach my $plugin (@{$schedule{$opts{level}}}) {
         try {
            $plugin->action(\%opts);
         } catch {
            when (/^FAIL:/) {die $_}
            default {
               $res = 1;
               $exit_code += 1;
               warn "plugin " . (ref $plugin) . " fails at level $opts{level} with message:\n$_\n";
            }
         };
      }
   }

   $res;
}

call_plugins level => 'full_graph', graph => $g;

my $indx = $g->get_graph_attribute('index');

sub generate_merged_dirname
{
   my ($functions, $all, $done, $asmodule) = @_;

   if (@$functions == 1) {
      return $functions->[0];
   } else {
      my $pf = 'merged_';

      if ($asmodule) {
         $pf = 'fullmodule';
      } elsif ($done) {
         $pf .= 'done';
      } elsif ($all) {
         $pf .= 'all';
      } else {
         $pf .= join('-', sort(@$functions));
         $pf = substr($pf, 0, 100) . '...'
           if length($pf) > 100;
      }
      return $pf;
   }
}

sub generate_files
{
   my ($graph, @functions) = @_;
   @functions = sort @functions;
   my @ids = map {$indx->{$_} // $_} @functions;
   my $fd;

   unless ($config{'output-file'}) {
      $fd = catdir $config{'output-dir'},
        generate_merged_dirname(\@functions, $config{all}, $config{done}, $config{asmodule});
      create_directory $fd;
   } else {
      $fd = $config{'output-dir'};
   }

   my $rgraph = get_predecessors_subgraph($graph, @ids);
   call_plugins
     level => 'reduced_graph',
     graph => $rgraph;

   #use Graph::Writer::Dot;
   #my @v = map {my $o = $rgraph->get_vertex_attribute($_, 'object'); $o->name} $rgraph->vertices;
   #my @e = map {my $o1 = $rgraph->get_vertex_attribute($_->[0], 'object'); my $o2 = $rgraph->get_vertex_attribute($_->[1], 'object'); [$o1->name, $o2->name]} $rgraph->edges;
   #my $ng = Graph->new(vertices => \@v, edges => \@e);
   #Graph::Writer::Dot->new->write_graph($ng, \*STDOUT);
   #exit;

   my $filename = $config{'output-file'};
   unless ($filename) {
      if ($#functions == 0 && $config{double}) {
         $filename = "$functions[0].c";
         print "Generated output file name: $filename\n";
      }
   }

   my @files = output_sources_graph(
      $rgraph,
      \@ids,
      $fd,
      $filename,
      $config{single} ? 1 : $config{double} ? 2 : 0,
      $config{'remove-fields'},
      $config{fullkernel},
      $config{full},
      sub {
         call_plugins function => \@functions, graph => $rgraph, @_;
      }
   );
   my $cfile = (grep {rindex($_, '.c') != -1} @files)[0];
   print "OUTPUT: $cfile\n\n";

   my $res = {dir => $fd};
   $res->{file} = \@files;
   return $res;
}

my @all_output_files;
{
   my $i = 1;
   my (undef, $col) = window_size();
   my $msg   = "GENERATING SUBGRAPH FOR FUNCTION: ";
   my $total = 0;

   unless ($config{all}) {
      # Arguments check
      @functions = grep {
         if   (exists $indx->{$_}) {1}
         else                      {warn "Function $_ doesn't exist in module.\n"; 0}
      } @functions;
      die "There is no valid functions.\n" unless @functions;
      $total = @functions;
      my $reserved_colons = length($msg) + length($total) + 3;

      unless ($config{merge}) {
         foreach (@functions) {
            my $spaces = $col - $reserved_colons - length($_) - length($i);
            print $msg . $_ . ' ' x $spaces . "[" . $i++ . "/$total]\n";
            my $output = generate_files $g, $_;
            call_plugins level => 'post_output', %$output, function => $_;
            push @all_output_files, $output;
         }
      } else {
         my $spaces = $col - $reserved_colons - length('merged') - 1;
         print $msg . 'merged' . ' ' x $spaces . "[1/1]\n";
         my $output = generate_files $g, @functions;
         call_plugins level => 'post_output', %$output, function => \@functions;
         push @all_output_files, $output;
      }
   } else {
      $total = keys %$indx;
      my $reserved_colons = length($msg) + length($total) + 3;
      if ($config{merge}) {
         my $spaces = $col - $reserved_colons - length('merged') - 1;
         print $msg . 'merged' . ' ' x $spaces . "[1/1]\n";
         my @vertices = keys %$indx;
         if ($config{asmodule}) {
            my @module;
            foreach ($g->vertices) {
               my $o = $g->get_vertex_attribute($_, 'object');
               if (blessed($o) eq 'C::Global') {
                  if ($o->type eq '--MODULE--') {
                     push @module, $o->id;
                  }
               }
            }
            push @vertices, @module;
         }
         my $output = generate_files $g, @vertices;
         call_plugins level => 'post_output', %$output, function => \@vertices;
         push @all_output_files, $output;
      } else {
         my %rindx    = reverse %$indx;
         my $subgraph = Graph::Directed->new(
            edges => [
               map {
                  grep {exists $rindx{$_->[1]}}
                    $g->edges_from($_)
               } values %$indx
            ],
            vertices => [values %$indx]
         );
         my %vertices = map {($_ => 0)} $subgraph->vertices;

         while ($subgraph->has_a_cycle) {
            my @cycle = $subgraph->find_a_cycle();
            if (@cycle == 1) {
               $subgraph->delete_edge(@cycle[0, 0]);
            } else {
               $subgraph->delete_edge(@cycle[0, 1]);
            }
         }

         my %vd = map {($_, $subgraph->in_degree($_))} keys %vertices;
         my @all_failed;
         while (%vertices) {
            my @zv;

            foreach (keys %vertices) {
               push @zv, $_ if 0 == $vd{$_};
            }

            unless (@zv) {
               warn "It's impossible to proceed. All available functions were generated.\n";
               warn "Plugins execution fail:\n\t" . join("\n\t", map {$rindx{$_}} @all_failed) . "\n";
               print "\n\n";
               warn "Failed to generate:\n\t" . join("\n\t", map {$rindx{$_}} keys %vertices) . "\n";
               last;
            }

            my @fail;
            foreach (sort @zv) {
               my $function = $rindx{$_};
               my $spaces   = $col - $reserved_colons - length($function) - length($i);
               print $msg . $function . ' ' x $spaces . "[" . $i++ . "/$total]\n";
               my $output = generate_files $g, $function;
               if (call_plugins(level => 'post_output', %$output, function => $function)) {
                  push @fail, $_;
               }
               push @all_output_files, $output;
            }
            push @all_failed, @fail;

            foreach (@fail, $subgraph->all_successors(@fail)) {
               $vd{$_} = -1;
            }

            # @zv / @fail
            @zv = difference \@zv, \@fail;
            --$vd{$_->[1]} foreach $subgraph->edges_from(@zv);
            delete @vertices{@zv};
         }
      }
   }
}

call_plugins(level => 'before_exit');

if ($config{editor}) {
   if (which($ENV{EDITOR})) {
      my @exec = ($ENV{EDITOR});
      foreach (@all_output_files) {
         my $cfile = (grep {rindex($_, '.c') != -1} @{$_->{file}})[0];
         push @exec, $cfile;
      }

      if ($#exec > 0) {
         my $pid = fork();
         die "can't fork: $!"
           unless defined $pid;
         if ($pid) {
            print "$pid\n";
            exit 0;
         }

         setsid();
         exec(@exec);
      } else {
         warn "EDITOR will not be started since there is no files to work with.\n";
      }
   } else {
      die "Can't find application from EDITOR env variable.\n";
   }
}

exit $exit_code;
